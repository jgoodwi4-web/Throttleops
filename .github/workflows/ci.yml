name: CI - Build & Push Docker images

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and push images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub (if configured)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GHCR (fallback)
        if: ${{ secrets.DOCKERHUB_USERNAME == '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image (Docker Hub)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/throttleops-api:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/throttleops-api:${{ github.sha }}

      - name: Build and push API image (GHCR)
        if: ${{ secrets.DOCKERHUB_USERNAME == '' }}
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/throttleops-api:latest
            ghcr.io/${{ github.repository_owner }}/throttleops-api:${{ github.sha }}

      - name: Build and push Web image (Docker Hub)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
        uses: docker/build-push-action@v4
        with:
          context: ./web
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/throttleops-web:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/throttleops-web:${{ github.sha }}

      - name: Build and push Web image (GHCR)
        if: ${{ secrets.DOCKERHUB_USERNAME == '' }}
        uses: docker/build-push-action@v4
        with:
          context: ./web
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/throttleops-web:latest
            ghcr.io/${{ github.repository_owner }}/throttleops-web:${{ github.sha }}

      - name: Create deploy artifact files
        run: |
          mkdir -p deploy
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            REGISTRY="docker.io/${{ secrets.DOCKERHUB_USERNAME }}"
          else
            REGISTRY="ghcr.io/${{ github.repository_owner }}"
          fi
          API_TAG="$REGISTRY/throttleops-api:${{ github.sha }}"
          WEB_TAG="$REGISTRY/throttleops-web:${{ github.sha }}"
          cat > deploy/docker-compose.yml <<'YAML'
version: '3.9'
services:
  mongo:
    image: mongo:6
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db

  api:
    image: ${API_TAG}
    restart: unless-stopped
    environment:
      - MONGO_URI=
      - PORT=5000
      - JWT_SECRET=
    ports:
      - "5000:5000"
    volumes:
      - ./config:/config
    depends_on:
      - mongo

  web:
    image: ${WEB_TAG}
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE=http://localhost:5000
    depends_on:
      - api

volumes:
  mongo_data: {}
YAML

      - name: Upload deploy artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-compose
          path: deploy/

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build
    if: ${{ (github.event_name == 'workflow_dispatch') || (github.ref == 'refs/heads/main' && secrets.AUTO_DEPLOY == 'true') }}
    steps:
      - name: Deploy via SSH (pull & restart compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            cd "${{ secrets.REMOTE_PATH }}"
            docker compose pull
            docker compose up -d --remove-orphans
